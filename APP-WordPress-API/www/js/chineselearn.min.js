// angular.module is a global place for creating, registering and retrieving Angular modules
angular.module('chineselearn', [
    'ionic',  // ionic framework
    'ngCookies',
    'ngMessages',
    'pascalprecht.translate',  // inject the angular-translate module
    'tmh.dynamicLocale', // inject the angular-dynamic-locale module
    'toaster', // inject the angularjs-toaster module
    'LocalForageModule', // inject the angular-localforage module
    'chineselearn.controllers', 'chineselearn.config', 'chineselearn.directives', 'chineselearn.filters', 'chineselearn.services' //customs
])

.run(["$ionicPlatform", "$filter", "$timeout", "toaster", function ($ionicPlatform, $filter, $timeout, toaster) {
    $ionicPlatform.ready(function () {
        cordova.plugins.Keyboard.disableScroll(true);
        if (window.StatusBar && !ionic.Platform.isAndroid()) {
            StatusBar.styleLightContent();
        };

        /* TODO: Response with Network Unaccessable ? */
        function alert4Offline() {
            $timeout(function () {
                toaster.pop({
                    type: 'error',
                    body: $filter('translate')('INTERNET_CONNECTION_NONE'),
                    toasterId: 1
                });
            }, 0);
        };
        document.addEventListener("offline", alert4Offline, false);
    });

    // Exit App; only for Android System
    if (ionic.Platform.isAndroid()) {
        var countTimerForCloseApp = false;
        $ionicPlatform.registerBackButtonAction(function (e) {
            e.preventDefault();
            if (countTimerForCloseApp) {
                ionic.Platform.exitApp();
            } else {
                countTimerForCloseApp = true;
                // Force to popup immediately
                $timeout(function () {
                    toaster.pop({
                        type: 'error',
                        body: $filter('translate')('CONFIRM_BEFORE_APP_EXIT'),
                        toasterId: 1
                    });
                }, 0);

                $timeout(function () {
                    countTimerForCloseApp = false;
                }, 5000);
            };
            return false;
        }, 101);
    };
}])

.config(["$httpProvider", "$ionicConfigProvider", "tmhDynamicLocaleProvider", "$translateProvider", "$localForageProvider", "$stateProvider", "$urlRouterProvider", function ($httpProvider, $ionicConfigProvider, tmhDynamicLocaleProvider, $translateProvider, $localForageProvider, $stateProvider, $urlRouterProvider) {
    $httpProvider.defaults.useXDomain = true;

    //global configure
    $ionicConfigProvider.tabs.position('bottom');

    //locale location
    tmhDynamicLocaleProvider.localeLocationPattern('locales/angular-locale_{{locale}}.js');

    // i18n
    $translateProvider
      .useStaticFilesLoader({
          prefix: 'i18n/',
          suffix: '.json'
      })
      .registerAvailableLanguageKeys(['de', 'en', 'es', 'fr', 'hi', 'ja', 'pt', 'ru', 'zh'], {
          'de': 'de', 'de_*': 'de',
          'en': 'en', 'en_*': 'en',
          'es': 'es', 'es_*': 'es',
          'fr': 'fr', 'fr_*': 'fr',
          'hi': 'hi', 'hi_*': 'hi',
          'ja': 'ja', 'ja_*': 'ja',
          'pt': 'pt', 'pt_*': 'pt',
          'ru': 'ru', 'ru_*': 'ru',
          'zh': 'zh', 'zh_*': 'zh'
      })
      .preferredLanguage('en')
      .determinePreferredLanguage()
      .fallbackLanguage(['en', 'zh', 'es', 'de'])
      .useSanitizeValueStrategy('escapeParameters')
      .useLocalStorage();

    // Setup defaults for LocalForage
    $localForageProvider.config({
        name: 'ChineseLearnInfo', // name of the database and prefix for your data, it is "lf" by default
        storeName: 'prefPosts', // name of the table
        description: 'Let user to keep their preference on ChineseLearnInfo Post(s) on mobile.'
    });

    // Ionic uses AngularUI Router which uses the concept of states
    $stateProvider
    // setup an abstract state for the tabs directive
      .state('tab', {
          url: "/tab",
          abstract: true,
          templateUrl: "templates/tabs.html"
      })
      .state('tab.dash', {
          url: '/dash',
          views: {
              'tab-dash': {
                  templateUrl: 'templates/tab-dash.html',
                  controller: 'DashCtrl'
              }
          }
      })
      .state('tab.posts', {
          url: '/posts',
          cache: false,
          views: {
              'tab-posts': {
                  templateUrl: 'templates/tab-posts.html',
                  controller: 'PostsCtrl'
              }
          }
      })
      .state('tab.post-detail', {
          url: '/posts/:postId',
          views: {
              'tab-posts': {
                  templateUrl: 'templates/post-detail.html',
                  controller: 'PostDetailCtrl'
              }
          }
      })
      .state('tab.tags', {
          url: '/tags',
          cache: false,
          views: {
              'tab-tags': {
                  templateUrl: 'templates/tab-tags.html',
                  controller: 'TagsCtrl'
              }
          }
      })
      .state('tab.tag-posts', {
          url: '/tagposts/:tagSlug/:tagName',
          views: {
              'tab-posts': {
                  templateUrl: 'templates/tab-posts.html',
                  controller: 'PostsCtrl'
              }
          }
      })
      .state('tab.categories', {
          url: '/categories',
          cache: false,
          views: {
              'tab-categories': {
                  templateUrl: 'templates/tab-categories.html',
                  controller: 'CategoriesCtrl'
              }
          }
      })
      .state('tab.category-posts', {
          url: '/categoryposts/:categorySlug/:categoryName',
          views: {
              'tab-posts': {
                  templateUrl: 'templates/tab-posts.html',
                  controller: 'PostsCtrl'
              }
          }
      })
      .state('tab.settings', {
          url: '/settings',
          views: {
              'tab-settings': {
                  templateUrl: 'templates/tab-settings.html',
                  controller: 'SettingsCtrl'
              }
          }
      });

    // if none of the above states are matched, use this as the fallback
    $urlRouterProvider.otherwise('/tab/dash');
}]);
angular.module('chineselearn.config', [])

.constant('AppConfig', {
    appName: 'Chinese Learn Info',
    domainURI: 'https://chineselearn.info/',
    wpAPIURI: 'wp-json/wp/v2/',
    wpAPIKey: '',
    wpAPISecret: '',
    wpAPIURIsuffix: 'filter[orderby]=id&filter[order]=ASC&filter[limit]=',
    wpAPIRSlimit: 10,
    wpConnectTimeout: 5000,
    eeAPIName: 'yannicklin@twoudia.com',
    eeServiceKey: '9ef8dacb-1080-401c-934e-0272a02b96e7',
    eeAPIURI: 'https://api.elasticemail.com/mailer/send',
    contactForm2Email: 'support@chineselearn.info',
    contactForm2User: 'Support',
    eeConnectTimeout: 10000
});
angular.module('chineselearn.services', [])

.factory('DataLoader', ["$http", "AppSettings", function ($http, AppSettings) {
    return {
        get: function ($term, $limit) {
            var result = $http({
                method: 'GET',
                url: AppSettings.getURI($term, $limit),
                timeout: AppSettings.get('wpConnectTimeout')
            });
            return result;
        }
    }
}])

.factory('EmailSender', ["$http", "$log", "AppSettings", "$timeout", "toaster", function ($http, $log, AppSettings, $timeout, toaster) {
    return {
        send: function ($mail, $sendername) {
            $http({
                method: 'POST',
                url: AppSettings.get('eeAPIURI'),
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
                },
                transformRequest: function (obj) {
                    var str = [];
                    for (var p in obj) {
                        if (obj[p].length > 0) { str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p])); }
                    }
                    return str.join('&');
                },
                data: $mail,
                timeout: AppSettings.get('eeConnectTimeout')
            }).then(
            function success() {
                $timeout(function () {
                    toaster.pop({
                    type: 'info',
                    body: $filter('translate')('ALERT_MAIL_SENT', { name: $sendername }),
                    toasterId: 2
                });
                }, 0);
            }, function error() {
                $log.debug('error sending email.');
            });
            return null;
        }
    }
}])

.factory('PHPJSfunc', function () {
    return {
        urlencode: function ($uri) {
            $uri = ($uri + '').toString();
            var result = encodeURIComponent($uri)
              .replace(/!/g, '%21')
              .replace(/'/g, '%27')
              .replace(/\(/g, '%28')
              .replace(/\)/g, '%29')
              .replace(/\*/g, '%2A')
              .replace(/%20/g, '+');
            return result;
        }
    }
})

.factory('AppSettings', ["AppConfig", "$translate", "tmhDynamicLocale", function (AppConfig, $translate, tmhDynamicLocale) {
    function setLanguageURI(value) {
        switch (value) {
            case 'en':
                savedData.languageURI = '';
                break;
            case 'zh':
                savedData.languageURI = 'zh-hant/';
                break;
            default:
                savedData.languageURI = '';
                //savedData.languageURI = value + '/';
        }
    }

    var savedData = AppConfig;
    // Set Language and LanguageURI
    savedData.language = $translate.use();
    setLanguageURI(savedData.language);

    return {
        change: function ($item, value) {
            savedData[$item] = value;
            if ($item == 'language') {
                setLanguageURI(value);
                $translate.use(value);
                tmhDynamicLocale.set(value);
            }
        },
        get: function ($item) {
            return savedData[$item];
        },
        getURI: function ($term, $limit) {
            ($limit == 0) ? ($limit = savedData.wpAPIRSlimit) : ($limit = $limit);
            if ($term.indexOf('?') < 0) {
                return savedData.domainURI + savedData.languageURI + savedData.wpAPIURI + $term + '?' + savedData.wpAPIURIsuffix + $limit;
            } else {
                return savedData.domainURI + savedData.languageURI + savedData.wpAPIURI + $term + '&' + savedData.wpAPIURIsuffix + $limit;
            };
        }
    };
}]);
angular.module('chineselearn.controllers', [])

.controller('DashCtrl', function () { })

.controller('PostsCtrl', ["$scope", "DataLoader", "$stateParams", "$log", "$filter", "$ionicLoading", "AppSettings", function ($scope, DataLoader, $stateParams, $log, $filter, $ionicLoading, AppSettings) {
    $scope.posts = null;
    $scope.RSempty = false;
    var nextPage = 1;
    $scope.NextPageIndicator = 0;

    // Get posts [under Params constraint]
    var termQueryString = 'posts';
    if ($stateParams.tagSlug) {
        termQueryString += '?filter[tag]=' + $stateParams.tagSlug;
        $scope.termQS = { Type: $filter('translate')('TAB_TITLE_TAGS'), Term: $stateParams.tagName };
    } else if ($stateParams.categorySlug) {
        termQueryString += '?filter[category_name]=' + $stateParams.categorySlug;
        $scope.termQS = { Type: $filter('translate')('TAB_TITLE_CATEGORIES'), Term: $stateParams.categoryName };
    }

    $scope.loadPosts = function () {
        $ionicLoading.show({
            template: '<ion-spinner icon="ripple" class="spinner-energized"></ion-spinner>' + $filter('translate')('LOADING_TEXT')
        });

        DataLoader.get(termQueryString, 0).then(function (response) {
            if (response.data.length == 0) {
                $scope.posts = null;
                $scope.RSempty = true;
            } else {
                $scope.posts = response.data;
                if (response.data.length == AppSettings.get('wpAPIRSlimit')) {
                    nextPage++;
                    $scope.NextPageIndicator = 1;
                };
            };
            $ionicLoading.hide();
        }, function (response) {
            $log.error('error', response);
            $ionicLoading.hide();
            $scope.RSempty = true;
        });
    }
    $scope.loadPosts();

    $scope.loadNextPage = function () {
        $ionicLoading.show({
            template: '<ion-spinner icon="ripple" class="spinner-energized"></ion-spinner>' + $filter('translate')('LOADING_TEXT')
        });
        $scope.NextPageIndicator = 0;

        DataLoader.get(termQueryString + '&page=' + nextPage, 0).then(function (response) {
            if (response.data.length > 0) {
                $scope.posts = $scope.posts.concat(response.data);
                if (response.data.length == AppSettings.get('wpAPIRSlimit')) {
                    nextPage++;
                    $scope.NextPageIndicator = 1;
                };
            };
            $ionicLoading.hide();
            $scope.$broadcast('scroll.infiniteScrollComplete');
        }, function (response) {
            $log.error('error', response);
            $ionicLoading.hide();
            $scope.RSempty = true;
            $scope.$broadcast('scroll.infiniteScrollComplete');
        });
    };
}])

.controller('PostDetailCtrl', ["$scope", "$stateParams", "DataLoader", "$log", "$filter", "$ionicLoading", "$ionicHistory", function ($scope, $stateParams, DataLoader, $log, $filter, $ionicLoading, $ionicHistory) {
    $scope.loadPost = function () {
        $ionicLoading.show({
            template: '<ion-spinner icon="ripple" class="spinner-energized"></ion-spinner>' + $filter('translate')('LOADING_TEXT')
        });

        DataLoader.get('posts/' + $stateParams.postId, 0).then(function (response) {
            $scope.post = response.data;
            $ionicLoading.hide();
        }, function (response) {
            $log.error('error', response);
            $ionicLoading.hide();
        });
    }
    $scope.loadPost();

    $scope.closePost = function () {
        $ionicHistory.goBack();
    }
}])


.controller('TagsCtrl', ["$scope", "DataLoader", "$log", "$filter", "$ionicLoading", function ($scope, DataLoader, $log, $filter, $ionicLoading) {
    $scope.tags = null;
    $scope.RSempty = false;

    $scope.loadTags = function () {
        $ionicLoading.show({
            template: '<ion-spinner icon="ripple" class="spinner-energized"></ion-spinner>' + $filter('translate')('LOADING_TEXT')
        });

        DataLoader.get('tags', 1000).then(function (response) {
            if (response.data.length == 0) {
                $scope.tags = null;
                $scope.RSempty = true;
            } else {
                $scope.tags = response.data;
            };
            $ionicLoading.hide();
        }, function (response) {
            $log.error('error', response);
            $ionicLoading.hide();
            $scope.RSempty = true;
        });
    }
    $scope.loadTags();
}])


.controller('CategoriesCtrl', ["$scope", "DataLoader", "$log", "$filter", "$ionicLoading", function ($scope, DataLoader, $log, $filter, $ionicLoading) {
    $scope.categories = null;
    $scope.RSempty = false;

    $scope.loadCategories = function () {
        $ionicLoading.show({
            template: '<ion-spinner icon="ripple" class="spinner-energized"></ion-spinner>' + $filter('translate')('LOADING_TEXT')
        });

        DataLoader.get('categories', 100).then(function (response) {
            if (response.data.length == 0) {
                $scope.categories = null;
                $scope.RSempty = true;
            } else {
                $scope.categories = response.data;
            };
            $ionicLoading.hide();
        }, function (response) {
            $log.error('error', response);
            $ionicLoading.hide();
            $scope.RSempty = true;
        });
    }
    $scope.loadCategories();
}])


.controller('SettingsCtrl', ["$scope", "$translate", "tmhDynamicLocale", "AppSettings", "$ionicHistory", "EmailSender", "$filter", function ($scope, $translate, tmhDynamicLocale, AppSettings, $ionicHistory, EmailSender, $filter) {
    $scope.forms = {};
    $scope.ctForm = {};
    $scope.settings = {
        language: $translate.use()
    }

    // Change Lanuage and auto redirect to dash tab
    $scope.$watch('settings.language', function () {
        if ($scope.settings.language != AppSettings.get('language')) {
            AppSettings.change('language', $scope.settings.language);
            $ionicHistory.clearCache();
            $ionicHistory.clearHistory();
        };
    });

    // contact form submitting
    $scope.formSubmit = function () {
        var mailJSON = {
            'username' : AppSettings.get('eeAPIName'),
            'api_key': AppSettings.get('eeServiceKey'),
            'from': $scope.ctForm.ctEmail,
            'from_name': $scope.ctForm.ctName,
            'to': AppSettings.get('contactForm2Email'),
            'subject': 'Message via Mobile APP - ' + AppSettings.get('appName') + ', ' + $filter('date')(Date.now(), 'yyyy-MM-dd HH:mm Z'),
            'body_html': '<table style="border: 1px dashed black; border-collapse: collapse;">' + '<caption>' + AppSettings.get('appName') + '</caption>' +
                  '<tfoot style="color: red;"><tr><td style="border: 1px dashed black; padding: 5px;">Time</td><td style="border: 1px dashed black; padding: 5px;">' + $filter('date')(Date.now(), 'yyyy-MM-dd HH:mm Z') + '</td></tr>' +
                  '<tr><td style="border: 1px dashed black; padding: 5px;">SPEC</td><td style="border: 1px dashed black; padding: 5px;">Platform: ' + device.platform + ', Version: ' + device.version + ', Manufacturer: ' + device.manufacturer + ', Model: ' + device.model + ', UUID: ' + device.uuid + '</td></tr></tfoot>' +
                  '<tbody><tr><td style="border: 1px dashed black; padding: 5px;">Name</td>' + '<td style="border: 1px dashed black; padding: 5px;">' + $scope.ctForm.ctName + '</td></tr>' +
                  '<tr><td style="border: 1px dashed black; padding: 5px;">Email</td>' + '<td style="border: 1px dashed black; padding: 5px;">' + $scope.ctForm.ctEmail + '</td></tr>' +
                  '<tr><td style="border: 1px dashed black; padding: 5px;">Message</td>' + '<td style="border: 1px dashed black; padding: 5px;">' + $scope.ctForm.ctMessage + '</td></tr></tbody></table>',
            'body_text': 'TEXT VERSION: ' + $scope.ctForm.ctMessage
        };
        EmailSender.send(mailJSON, $scope.ctForm.ctName);

        //reset Form
        $scope.ctForm = {};
        $scope.forms.contactForm.$setPristine();
    };
}]);

angular.module('chineselearn.directives', [])

// Set up for grouped Radio Buttons, used in Language Selection
.directive('gpRadio', function () {
    return {
        restrict: 'AE',
        require: 'ngModel',
        scope: {
            model: '=ngModel',
            value: '=gpRadio'
        },
        link: function (scope, element, attrs, ngModelCtrl) {
            element.addClass('button');
            element.on('click', function (e) {
                scope.$apply(function () {
                    ngModelCtrl.$setViewValue(scope.value);
                });
            });

            scope.$watch('model', function (newVal) {
                element.removeClass('button-positive');
                if (newVal === scope.value) {
                    element.addClass('button-positive');
                };
            });
        }
    };
})

// Handling Keyboard KeyIn Event; especially for search
.directive('keyInput', function () {
    return function (scope, element, attrs) {
        element.bind("keydown keypress", function (event) {
            if (event.which === 13) {
                scope.$apply(function () {
                    scope.$eval(attrs.keyInput);
                });
                event.preventDefault();
            };
        });
    };
})

// Handling Element to hide while Keyboard shows up
.directive('keyboardHide', ["$window", function ($window) {
    return {
        restrict: 'A',
        link: function postLink(scope, element, attrs) {
            angular.element($window).bind('native.keyboardshow', function () {
                element.addClass('hide');
            });
            angular.element($window).bind('native.keyboardhide', function () {
                element.removeClass('hide');
            });
        }
    };
}])

// Handling Element to hide while Keyboard shows up especially for TABS
.directive('keyboardHide4tabs', ["$window", function ($window) {
    return {
        restrict: 'A',
        link: function postLink(scope, element, attrs) {
            angular.element($window).bind('native.keyboardshow', function () {
                element.addClass('tabs-item-hide');
            });
            angular.element($window).bind('native.keyboardhide', function () {
                element.removeClass('tabs-item-hide');
            });
        }
    };
}]);
angular.module('chineselearn.filters', [])

.filter('partRemove', ["$sce", function ($sce) {
    return function (origin, tag) {
        var htmlObject = document.createElement('div');
        htmlObject.innerHTML = origin;

        var parts = htmlObject.getElementsByTagName(tag);
        for (var i = parts.length; i > 0 ; i--) {
            parts[i - 1].parentNode.removeChild(parts[i - 1]);
        };

        return $sce.trustAsHtml(htmlObject.outerHTML);
    }
}])

.filter('unicode', ["$sce", function ($sce) {
    return function (x) {
        return $sce.trustAsHtml(x);
    }
}])

.filter('lengthLimit', function () {
    return function (origin, limit) {
        if (String(origin).length <= limit) {
            return origin;
        } else {
            return String(origin).substr(0, limit) + ' ... ';
        }
    }
})

.filter('unescapeHTML', function () {
    var entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': '&quot;',
        "'": '&#39;',
        "/": '&#x2F;'
    };

    return function (str) {
        angular.forEach(entityMap, function (value, key) {
            str = String(str).replace(new RegExp(value, 'gi'), key);
        });
        return str;
    }
});